# Define variables
$csvPath = "C:\TEMP\AzureADAppExpiringCertificatesAndSecrets.csv"
$emailServer = "mailrelay.nhill.root.nhhg"
$emailFrom = "noreply@nhg.org.uk"
$emailTo = "shanker.yarasu@nhg.org.uk"
$emailSubject = "Azure AD Application Expiring Certificates and Secrets"
$currentDateTime = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'

# Authenticate using the Azure Automation Run As account
$connection = Get-AutomationConnection -Name 'AzureRunAsConnection'
Connect-AzureAD -TenantId $connection.TenantId -ApplicationId $connection.ApplicationId -CertificateThumbprint $connection.CertificateThumbprint

# Get current date and calculate the expiration threshold
$currentDate = Get-Date
$expirationThreshold = $currentDate.AddDays(30)

# Get Azure AD application information
$applications = Get-AzureADApplication

# Filter applications with expiring certificates and secrets within 30 days
$filteredApplications = foreach ($application in $applications) {
    # Filter key credentials (certificates)
    $filteredKeyCredentials = $application.KeyCredentials | Where-Object {
        $_.EndDate -ne $null -and $_.EndDate -ge $currentDate -and $_.EndDate -le $expirationThreshold
    }

    # Filter password credentials (secrets)
    $filteredPasswordCredentials = $application.PasswordCredentials | Where-Object {
        $_.EndDate -ne $null -and $_.EndDate -ge $currentDate -and $_.EndDate -le $expirationThreshold
    }

    if ($filteredKeyCredentials.Count -gt 0 -or $filteredPasswordCredentials.Count -gt 0) {
        # Create custom object with relevant properties
        [PSCustomObject]@{
            Name = $application.DisplayName
            CertificateExpirationDate = $filteredKeyCredentials.EndDate
            SecretExpirationDate = $filteredPasswordCredentials.EndDate
        }
    }
}

# Export data to CSV file
$filteredApplications | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

# Create email message and attachment
$emailMessage = New-Object System.Net.Mail.MailMessage
$emailMessage.From = $emailFrom
$emailMessage.To.Add($emailTo)
$emailMessage.Subject = $emailSubject

# Create email body
$emailBody = @"
<b>Report name:</b><br>
NHG - Monthly Expiration status of Azure AD Applications Certificates and Secrets<br><br>

<b>Date:</b> $currentDateTime<br><br>

<b>Description:</b><br>
This report provides weekly status of all Azure AD Applications Certificates and secrets which will expire within 30 days. Please see the generated report in the attachment.
"@

$emailMessage.Body = $emailBody

# Set email body to HTML format
$emailMessage.IsBodyHtml = $true

# Attach CSV file
$emailAttachment = New-Object System.Net.Mail.Attachment($csvPath)
$emailMessage.Attachments.Add($emailAttachment)

# Create SMTP client and send email
try {
    $smtpClient = New-Object System.Net.Mail.SmtpClient($emailServer)
    $smtpClient.Send($emailMessage)
    Write-Output "CSV file has been exported and sent to $emailTo"
}
catch {
    Write-Output "Error sending email: $($_.Exception.Message)"
}
finally {
    $emailAttachment.Dispose()
    $smtpClient.Dispose()
}
############################

# Define variables
$csvPath = "C:\TEMP\AzureADAppExpiringCertificatesAndSecrets.csv"
$emailServer = "mailrelay.nhill.root.nhhg"
$emailFrom = "noreply@nhg.org.uk"
$emailTo = "shanker.yarasu@nhg.org.uk"
$emailSubject = "Azure AD Application Expiring Certificates and Secrets"
$currentDateTime = Get-Date -Format 'MM/dd/yyyy HH:mm:ss'

# Authenticate using the Azure Automation Run As account
$connection = Get-AutomationConnection -Name 'AzureRunAsConnection'
Connect-AzureAD -TenantId $connection.TenantId -ApplicationId $connection.ApplicationId -CertificateThumbprint $connection.CertificateThumbprint

# Get current date and calculate the expiration threshold
$currentDate = Get-Date
$expirationThreshold = $currentDate.AddDays(30)

# Get Azure AD application information
$applications = Get-AzureADApplication

# Filter applications with expiring certificates and secrets within 30 days
$filteredApplications = foreach ($application in $applications) {
    # Filter key credentials (certificates)
    $filteredKeyCredentials = $application.KeyCredentials | Where-Object {
        $_.EndDate -ne $null -and $_.EndDate -ge $currentDate -and $_.EndDate -le $expirationThreshold
    }

    # Filter password credentials (secrets)
    $filteredPasswordCredentials = $application.PasswordCredentials | Where-Object {
        $_.EndDate -ne $null -and $_.EndDate -ge $currentDate -and $_.EndDate -le $expirationThreshold
    }

    if ($filteredKeyCredentials.Count -gt 0 -or $filteredPasswordCredentials.Count -gt 0) {
        # Create custom object with relevant properties
        [PSCustomObject]@{
            Name = $application.DisplayName
            CertificateExpirationDate = $filteredKeyCredentials | Select-Object -ExpandProperty EndDate
            SecretExpirationDate = $filteredPasswordCredentials | Select-Object -ExpandProperty EndDate
        }
    }
}

# Export data to CSV file
$filteredApplications | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8

# Create email message and attachment
$emailMessage = New-Object System.Net.Mail.MailMessage
$emailMessage.From = $emailFrom
$emailMessage.To.Add($emailTo)
$emailMessage.Subject = $emailSubject

# Create email body
$emailBody = @"
<b>Report name:</b><br>
NHG - Monthly Expiration status of Azure AD Applications Certificates and Secrets<br><br>

<b>Date:</b> $currentDateTime<br><br>

<b>Description:</b><br>
This report provides weekly status of all Azure AD Applications Certificates and secrets which will expire within 30 days. Please see the generated report in the attachment.
"@

$emailMessage.Body = $emailBody

# Set email body to HTML format
$emailMessage.IsBodyHtml = $true

# Attach CSV file
$emailAttachment = New-Object System.Net.Mail.Attachment($csvPath)
$emailMessage.Attachments.Add($emailAttachment)

# Create SMTP client and send email
try {
    $smtpClient = New-Object System.Net.Mail.SmtpClient($emailServer)
    $smtpClient.Send($emailMessage)
    Write-Output "CSV file has been exported and sent to $emailTo"
}
catch {
    Write-Output "Error sending email: $($_.Exception.Message)"
}
finally {
    $emailAttachment.Dispose()
    $smtpClient.Dispose()
}
